using UnityEngine;

public class BuildManager : MonoBehaviour
{
    public GameObject MiniGun; // Tour 1
    public GameObject Cannon;  // Tour 2
    private GameObject selectedTower; // üî• Tour s√©lectionn√©e

    private bool isPlacing = false; // Mode placement
    public LayerMask groundLayer; // Layer pour le sol
    private GridManager gridManager; // R√©f√©rence au gestionnaire de grille

    public int miniGunCost = 50; // Co√ªt de la MiniGun
    public int cannonCost = 75;  // Co√ªt de la Cannon

    void Start()
    {
        gridManager = FindObjectOfType<GridManager>();
    }

    public void SelectMiniGun() // üî• Appel√© par le bouton MiniGun
    {
        if (MoneyManager.instance.CanAfford(miniGunCost)) // V√©rifie si le joueur peut se permettre la tour
        {
            selectedTower = MiniGun;
            isPlacing = true;
            MoneyManager.instance.SpendMoney(miniGunCost); // D√©duit l'argent lors de la s√©lection
            Debug.Log("MiniGun s√©lectionn√© !");
        }
        else
        {
            Debug.Log("Pas assez d'argent pour MiniGun !");
        }
    }

    public void SelectCannon() // üî• Appel√© par le bouton Cannon
    {
        if (MoneyManager.instance.CanAfford(cannonCost)) // V√©rifie si le joueur peut se permettre la tour
        {
            selectedTower = Cannon;
            isPlacing = true;
            MoneyManager.instance.SpendMoney(cannonCost); // D√©duit l'argent lors de la s√©lection
            Debug.Log("Cannon s√©lectionn√© !");
        }
        else
        {
            Debug.Log("Pas assez d'argent pour Cannon !");
        }
    }

    public void StopPlacingTower()
    {
        isPlacing = false;
        Debug.Log("Mode placement d√©sactiv√© !");
    }

    void Update()
    {
        if (!isPlacing || selectedTower == null) return;

        if (Input.GetMouseButtonDown(0)) // Clique gauche
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit;

            if (Physics.Raycast(ray, out hit, Mathf.Infinity, groundLayer))
            {
                Debug.Log("‚úÖ Raycast touch√© : " + hit.collider.name);

                Vector3 gridPosition = gridManager.GetNearestGridPosition(hit.point);

                if (IsGridOccupied(gridPosition))
                {
                    Debug.Log("üö´ Cet emplacement est d√©j√† occup√© !");
                    return;
                }

                Instantiate(selectedTower, gridPosition, Quaternion.identity); // üî• Instancie la tour s√©lectionn√©e
                Debug.Log($"‚úÖ {selectedTower.name} plac√©e √† : " + gridPosition);
                
                isPlacing = false; // D√©sactiver le mode placement apr√®s avoir pos√© une tour
            }
            else
            {
                Debug.Log("üö´ Rien touch√© !");
            }
        }
    }

    private bool IsGridOccupied(Vector3 position)
    {
        Collider[] colliders = Physics.OverlapSphere(position, 0.5f);
        foreach (Collider collider in colliders)
        {
            if (collider.CompareTag("Tower"))
            {
                return true;
            }
        }
        return false;
    }
}
