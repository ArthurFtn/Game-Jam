using UnityEngine;

public class BuildManager : MonoBehaviour
{
    public GameObject MiniGun; // Tour 1
    public GameObject Cannon;  // Tour 2
    private GameObject selectedTower; // Tour s√©lectionn√©e
    private GameObject previewTower; // Pr√©visualisation de la tour
    private bool isPlacing = false; // Mode placement
    public LayerMask groundLayer; // Layer pour le sol
    private GridManager gridManager; // R√©f√©rence au gestionnaire de grille

    void Start()
    {
        gridManager = FindObjectOfType<GridManager>();
    }

    public void SelectMiniGun() // Appel√© par le bouton MiniGun
    {
        selectedTower = MiniGun;
        if (selectedTower == null)
        {
            Debug.LogError("La tour MiniGun n'est pas assign√©e dans l'inspecteur !");
        }
        isPlacing = true;
        CreatePreviewTower(); // Cr√©er la pr√©visualisation de la tour
        Debug.Log("MiniGun s√©lectionn√© !");
    }

    public void SelectCannon() // Appel√© par le bouton Cannon
    {
        selectedTower = Cannon;
        if (selectedTower == null)
        {
            Debug.LogError("La tour Cannon n'est pas assign√©e dans l'inspecteur !");
        }
        isPlacing = true;
        CreatePreviewTower(); // Cr√©er la pr√©visualisation de la tour
        Debug.Log("Cannon s√©lectionn√© !");
    }

    public void StopPlacingTower()
    {
        isPlacing = false;
        Destroy(previewTower); // Supprimer la pr√©visualisation si le placement est annul√©
        Debug.Log("Mode placement d√©sactiv√© !");
    }

    void CreatePreviewTower()
    {
        if (selectedTower == null)
        {
            Debug.LogError("Aucune tour s√©lectionn√©e !"); // Ajoute un message d'erreur si la tour n'est pas s√©lectionn√©e.
            return; // Ne pas essayer de pr√©visualiser si aucune tour n'est s√©lectionn√©e.
        }

        if (previewTower != null)
        {
            Destroy(previewTower); // Supprimer l'ancienne pr√©visualisation s'il y en a une
        }

        // Instancier la tour s√©lectionn√©e comme pr√©visualisation
        previewTower = Instantiate(selectedTower, Vector3.zero, Quaternion.identity);
        previewTower.GetComponent<Renderer>().material.color = Color.green; // Changer la couleur de la pr√©visualisation pour la rendre visible
        previewTower.GetComponent<Collider>().enabled = false; // D√©sactiver le collider pour qu'elle ne bloque pas le placement

        // D√©sactiver l'attaque sur la pr√©visualisation
        DisableTowerAttack(previewTower);
    }

    void DisableTowerAttack(GameObject tower)
    {
        if (tower == null) return;

        ITowerAttack attackScript = null;

        // Parcourir tous les MonoBehaviour pour trouver ITowerAttack
        foreach (MonoBehaviour script in tower.GetComponentsInChildren<MonoBehaviour>())
        {
            if (script is ITowerAttack)
            {
                attackScript = (ITowerAttack)script;
                break;
            }
        }

        if (attackScript != null)
        {
            attackScript.DisableAttack();
            Debug.Log("üî¥ Attaque d√©sactiv√©e pour la pr√©visualisation.");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Aucun script ITowerAttack trouv√© sur la tour.");
        }
    }


    void Update()
    {
        if (!isPlacing || selectedTower == null) return;

        if (previewTower != null)
        {
            Vector3 gridPosition = GetMousePositionOnGrid(); // Obtenir la position du curseur sur la grille
            previewTower.transform.position = gridPosition; // D√©placer la pr√©visualisation

            if (Input.GetMouseButtonDown(0)) // Clique gauche
            {
                if (IsGridOccupied(gridPosition)) // V√©rifier si l'emplacement est occup√©
                {
                    Debug.Log("üö´ Cet emplacement est d√©j√† occup√© !");
                    return;
                }

                Instantiate(selectedTower, gridPosition, Quaternion.identity); // Poser la tour
                Destroy(previewTower); // Supprimer la pr√©visualisation
                isPlacing = false; // D√©sactiver le mode placement apr√®s avoir pos√© la tour
            }
        }
    }

    private bool IsGridOccupied(Vector3 position)
    {
        Collider[] colliders = Physics.OverlapSphere(position, 0.5f); // V√©rifie si l'emplacement est occup√©
        foreach (Collider collider in colliders)
        {
            // Ignorer la pr√©visualisation de la tour (√©viter que la pr√©visualisation soit d√©tect√©e comme une tour plac√©e)
            if (collider.gameObject == previewTower) continue;

            if (collider.CompareTag("Tower"))
            {
                return true; // Si un collider avec le tag "Tower" est trouv√©, l'emplacement est occup√©
            }
        }
        return false;
    }

    private Vector3 GetMousePositionOnGrid()
    {
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit, Mathf.Infinity, groundLayer))
        {
            return gridManager.GetNearestGridPosition(hit.point); // Retourner la position sur la grille
        }

        return Vector3.zero; // Retourner la position par d√©faut si rien n'est touch√©
    }
}
